

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Mar 22 19:57:17 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.40
    19                           ; Generated 17/11/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F628A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  008C                     	;# 
    81  008E                     	;# 
    82  0092                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009A                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009F                     	;# 
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  008C                     	;# 
   118  008E                     	;# 
   119  0092                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009A                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009F                     	;# 
   127  0000                     	;# 
   128  0001                     	;# 
   129  0002                     	;# 
   130  0003                     	;# 
   131  0004                     	;# 
   132  0005                     	;# 
   133  0006                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  008C                     	;# 
   155  008E                     	;# 
   156  0092                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009F                     	;# 
   164  001A                     _RCREG	set	26
   165  0019                     _TXREG	set	25
   166  000C                     _PIR1bits	set	12
   167  000B                     _INTCONbits	set	11
   168  0018                     _RCSTAbits	set	24
   169  0005                     _PORTAbits	set	5
   170  001F                     _CMCONbits	set	31
   171  0099                     _SPBRG	set	153
   172  0098                     _TXSTAbits	set	152
   173  0086                     _TRISBbits	set	134
   174  0085                     _TRISAbits	set	133
   175  008E                     _PCONbits	set	142
   176                           
   177                           	psect	strings
   178  0001                     __pstrings:
   179  0001                     stringtab:
   180  0001                     __stringtab:
   181  0001                     stringcode:	
   182                           ;	String table - string pointers are 1 byte each
   183                           
   184  0001                     stringdir:
   185  0001  3000               	movlw	high stringdir
   186  0002  008A               	movwf	10
   187  0003  0804               	movf	4,w
   188  0004  0A84               	incf	4,f
   189  0005  0782               	addwf	2,f
   190  0006                     __stringbase:
   191  0006  3400               	retlw	0
   192  0007                     __end_of__stringtab:
   193  0007                     STR_1:
   194  0007  344F               	retlw	79	;'O'
   195  0008  344B               	retlw	75	;'K'
   196  0009  340D               	retlw	13
   197  000A  340A               	retlw	10
   198  000B  3400               	retlw	0
   199                           
   200                           	psect	cinit
   201  07FE                     start_initialization:	
   202                           ; #config settings
   203                           
   204  07FE                     __initialization:
   205  07FE                     end_of_initialization:	
   206                           ;End of C runtime variable initialization code
   207                           
   208  07FE                     __end_of__initialization:
   209  07FE  0183               	clrf	3
   210  07FF  2F03               	ljmp	_main	;jump to C main() function
   211                           
   212                           	psect	cstackCOMMON
   213  0070                     __pcstackCOMMON:
   214  0070                     ?_uart_send_string:
   215  0070                     ?_setup:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?_main:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ?_uart_send:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ??_uart_send:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?___aldiv:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     uart_send@byte:	
   231                           ; 4 bytes @ 0x0
   232                           
   233  0070                     ___aldiv@divisor:	
   234                           ; 1 bytes @ 0x0
   235                           
   236                           
   237                           ; 4 bytes @ 0x0
   238  0070                     	ds	1
   239  0071                     ??_uart_send_string:
   240                           
   241                           ; 1 bytes @ 0x1
   242  0071                     	ds	1
   243  0072                     uart_send_string@str:
   244                           
   245                           ; 1 bytes @ 0x2
   246  0072                     	ds	2
   247  0074                     ___aldiv@dividend:
   248                           
   249                           ; 4 bytes @ 0x4
   250  0074                     	ds	4
   251  0078                     ??___aldiv:
   252                           
   253                           ; 1 bytes @ 0x8
   254  0078                     	ds	1
   255  0079                     ??_uart_init:
   256  0079                     ??_setup:	
   257                           ; 1 bytes @ 0x9
   258                           
   259  0079                     ??_main:	
   260                           ; 1 bytes @ 0x9
   261                           
   262                           
   263                           ; 1 bytes @ 0x9
   264  0079                     	ds	3
   265                           
   266                           	psect	cstackBANK0
   267  0020                     __pcstackBANK0:
   268  0020                     ___aldiv@counter:
   269                           
   270                           ; 1 bytes @ 0x0
   271  0020                     	ds	1
   272  0021                     ___aldiv@sign:
   273                           
   274                           ; 1 bytes @ 0x1
   275  0021                     	ds	1
   276  0022                     ___aldiv@quotient:
   277                           
   278                           ; 4 bytes @ 0x2
   279  0022                     	ds	4
   280  0026                     ?_uart_init:
   281  0026                     uart_init@baudrate:	
   282                           ; 1 bytes @ 0x6
   283                           
   284                           
   285                           ; 2 bytes @ 0x6
   286  0026                     	ds	2
   287                           
   288                           	psect	maintext
   289  0703                     __pmaintext:	
   290 ;;
   291 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   292 ;;
   293 ;; *************** function _main *****************
   294 ;; Defined at:
   295 ;;		line 20 in file "main.c"
   296 ;; Parameters:    Size  Location     Type
   297 ;;		None
   298 ;; Auto vars:     Size  Location     Type
   299 ;;		None
   300 ;; Return value:  Size  Location     Type
   301 ;;                  1    wreg      void 
   302 ;; Registers used:
   303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   304 ;; Tracked objects:
   305 ;;		On entry : B00/0
   306 ;;		On exit  : 0/0
   307 ;;		Unchanged: 0/0
   308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   309 ;;      Params:         0       0       0       0
   310 ;;      Locals:         0       0       0       0
   311 ;;      Temps:          3       0       0       0
   312 ;;      Totals:         3       0       0       0
   313 ;;Total ram usage:        3 bytes
   314 ;; Hardware stack levels required when called: 3
   315 ;; This function calls:
   316 ;;		_setup
   317 ;;		_uart_send_string
   318 ;; This function is called by:
   319 ;;		Startup code after reset
   320 ;; This function uses a non-reentrant model
   321 ;;
   322                           
   323                           
   324                           ;psect for function _main
   325  0703                     _main:
   326  0703                     l830:	
   327                           ;incstack = 0
   328                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   329                           
   330                           
   331                           ;main.c: 21:     setup();
   332  0703  26F1               	fcall	_setup
   333  0704                     l832:
   334                           
   335                           ;main.c: 23:         if (!PORTAbits.RA1) {
   336  0704  1283               	bcf	3,5	;RP0=0, select bank0
   337  0705  1303               	bcf	3,6	;RP1=0, select bank0
   338  0706  1885               	btfsc	5,1	;volatile
   339  0707  2F09               	goto	u291
   340  0708  2F0A               	goto	u290
   341  0709                     u291:
   342  0709  2F04               	goto	l832
   343  070A                     u290:
   344  070A                     l834:
   345                           
   346                           ;main.c: 24:             uart_send_string("OK\r\n");
   347  070A  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   348  070B  271A               	fcall	_uart_send_string
   349  070C                     l836:
   350                           
   351                           ;main.c: 25:             _delay((unsigned long)((300)*(4000000/4000.0)));
   352  070C  3002               	movlw	2
   353  070D  00FB               	movwf	??_main+2
   354  070E  3086               	movlw	134
   355  070F  00FA               	movwf	??_main+1
   356  0710  3099               	movlw	153
   357  0711  00F9               	movwf	??_main
   358  0712                     u307:
   359  0712  0BF9               	decfsz	??_main,f
   360  0713  2F12               	goto	u307
   361  0714  0BFA               	decfsz	??_main+1,f
   362  0715  2F12               	goto	u307
   363  0716  0BFB               	decfsz	??_main+2,f
   364  0717  2F12               	goto	u307
   365  0718  2F04               	goto	l832
   366  0719  2800               	ljmp	start
   367  071A                     __end_of_main:
   368                           
   369                           	psect	text1
   370  071A                     __ptext1:	
   371 ;; *************** function _uart_send_string *****************
   372 ;; Defined at:
   373 ;;		line 32 in file "uart.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;  str             1    wreg     PTR const unsigned char 
   376 ;;		 -> STR_1(5), 
   377 ;; Auto vars:     Size  Location     Type
   378 ;;  str             1    2[COMMON] PTR const unsigned char 
   379 ;;		 -> STR_1(5), 
   380 ;; Return value:  Size  Location     Type
   381 ;;                  1    wreg      void 
   382 ;; Registers used:
   383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   389 ;;      Params:         0       0       0       0
   390 ;;      Locals:         1       0       0       0
   391 ;;      Temps:          1       0       0       0
   392 ;;      Totals:         2       0       0       0
   393 ;;Total ram usage:        2 bytes
   394 ;; Hardware stack levels used: 1
   395 ;; Hardware stack levels required when called: 1
   396 ;; This function calls:
   397 ;;		_uart_send
   398 ;; This function is called by:
   399 ;;		_main
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           
   404                           ;psect for function _uart_send_string
   405  071A                     _uart_send_string:
   406                           
   407                           ;incstack = 0
   408                           ; Regs used in _uart_send_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   409                           ;uart_send_string@str stored from wreg
   410  071A  00F2               	movwf	uart_send_string@str
   411  071B                     l822:
   412  071B                     l53:	
   413                           ;uart.c: 35:     }
   414                           
   415                           
   416                           ;uart.c: 33:     while(!PIR1bits.TXIF) {
   417  071B  1283               	bcf	3,5	;RP0=0, select bank0
   418  071C  1303               	bcf	3,6	;RP1=0, select bank0
   419  071D  1E0C               	btfss	12,4	;volatile
   420  071E  2F20               	goto	u271
   421  071F  2F21               	goto	u270
   422  0720                     u271:
   423  0720  2F1B               	goto	l53
   424  0721                     u270:
   425  0721  2F2A               	goto	l828
   426  0722                     l824:
   427                           
   428                           ;uart.c: 38:         uart_send((unsigned char)*str++);
   429  0722  0872               	movf	uart_send_string@str,w
   430  0723  0084               	movwf	4
   431  0724  2001               	fcall	stringdir
   432  0725  26E7               	fcall	_uart_send
   433  0726                     l826:
   434  0726  3001               	movlw	1
   435  0727  00F1               	movwf	??_uart_send_string
   436  0728  0871               	movf	??_uart_send_string,w
   437  0729  07F2               	addwf	uart_send_string@str,f
   438  072A                     l828:
   439                           
   440                           ;uart.c: 37:     while(*str)
   441  072A  0872               	movf	uart_send_string@str,w
   442  072B  0084               	movwf	4
   443  072C  2001               	fcall	stringdir
   444  072D  3A00               	xorlw	0
   445  072E  1D03               	skipz
   446  072F  2F31               	goto	u281
   447  0730  2F32               	goto	u280
   448  0731                     u281:
   449  0731  2F22               	goto	l824
   450  0732                     u280:
   451  0732                     l59:
   452  0732  0008               	return
   453  0733                     __end_of_uart_send_string:
   454                           
   455                           	psect	text2
   456  06E7                     __ptext2:	
   457 ;; *************** function _uart_send *****************
   458 ;; Defined at:
   459 ;;		line 24 in file "uart.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;  byte            1    wreg     unsigned char 
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  byte            1    0[COMMON] unsigned char 
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   473 ;;      Params:         0       0       0       0
   474 ;;      Locals:         1       0       0       0
   475 ;;      Temps:          0       0       0       0
   476 ;;      Totals:         1       0       0       0
   477 ;;Total ram usage:        1 bytes
   478 ;; Hardware stack levels used: 1
   479 ;; This function calls:
   480 ;;		Nothing
   481 ;; This function is called by:
   482 ;;		_uart_send_string
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           
   487                           ;psect for function _uart_send
   488  06E7                     _uart_send:
   489                           
   490                           ;incstack = 0
   491                           ; Regs used in _uart_send: [wreg]
   492                           ;uart_send@byte stored from wreg
   493  06E7  00F0               	movwf	uart_send@byte
   494  06E8                     l718:
   495  06E8                     l47:	
   496                           ;uart.c: 27:     }
   497                           
   498                           
   499                           ;uart.c: 25:     while(!PIR1bits.TXIF) {
   500  06E8  1283               	bcf	3,5	;RP0=0, select bank0
   501  06E9  1303               	bcf	3,6	;RP1=0, select bank0
   502  06EA  1E0C               	btfss	12,4	;volatile
   503  06EB  2EED               	goto	u111
   504  06EC  2EEE               	goto	u110
   505  06ED                     u111:
   506  06ED  2EE8               	goto	l47
   507  06EE                     u110:
   508  06EE                     l720:
   509                           
   510                           ;uart.c: 29:     TXREG = byte;
   511  06EE  0870               	movf	uart_send@byte,w
   512  06EF  0099               	movwf	25	;volatile
   513  06F0                     l50:
   514  06F0  0008               	return
   515  06F1                     __end_of_uart_send:
   516                           
   517                           	psect	text3
   518  06F1                     __ptext3:	
   519 ;; *************** function _setup *****************
   520 ;; Defined at:
   521 ;;		line 13 in file "main.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, status,2, status,0, pclath, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   535 ;;      Params:         0       0       0       0
   536 ;;      Locals:         0       0       0       0
   537 ;;      Temps:          0       0       0       0
   538 ;;      Totals:         0       0       0       0
   539 ;;Total ram usage:        0 bytes
   540 ;; Hardware stack levels used: 1
   541 ;; Hardware stack levels required when called: 2
   542 ;; This function calls:
   543 ;;		_uart_init
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           
   550                           ;psect for function _setup
   551  06F1                     _setup:
   552  06F1                     l814:	
   553                           ;incstack = 0
   554                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   555                           
   556                           
   557                           ;main.c: 14:     PCONbits.OSCF = 1;
   558  06F1  1683               	bsf	3,5	;RP0=1, select bank1
   559  06F2  1303               	bcf	3,6	;RP1=0, select bank1
   560  06F3  158E               	bsf	14,3	;volatile
   561  06F4                     l816:
   562                           
   563                           ;main.c: 15:     uart_init(9600);
   564  06F4  3080               	movlw	128
   565  06F5  1283               	bcf	3,5	;RP0=0, select bank0
   566  06F6  1303               	bcf	3,6	;RP1=0, select bank0
   567  06F7  00A6               	movwf	uart_init@baudrate
   568  06F8  3025               	movlw	37
   569  06F9  00A7               	movwf	uart_init@baudrate+1
   570  06FA  2733               	fcall	_uart_init
   571  06FB                     l818:
   572                           
   573                           ;main.c: 16:     CMCONbits.CM = 0x07;
   574  06FB  3007               	movlw	7
   575  06FC  1283               	bcf	3,5	;RP0=0, select bank0
   576  06FD  1303               	bcf	3,6	;RP1=0, select bank0
   577  06FE  049F               	iorwf	31,f	;volatile
   578  06FF                     l820:
   579                           
   580                           ;main.c: 17:     TRISAbits.TRISA1= 1;
   581  06FF  1683               	bsf	3,5	;RP0=1, select bank1
   582  0700  1303               	bcf	3,6	;RP1=0, select bank1
   583  0701  1485               	bsf	5,1	;volatile
   584  0702                     l17:
   585  0702  0008               	return
   586  0703                     __end_of_setup:
   587                           
   588                           	psect	text4
   589  0733                     __ptext4:	
   590 ;; *************** function _uart_init *****************
   591 ;; Defined at:
   592 ;;		line 4 in file "uart.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;  baudrate        2    6[BANK0 ] unsigned short 
   595 ;; Auto vars:     Size  Location     Type
   596 ;;		None
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, status,2, status,0, pclath, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   606 ;;      Params:         0       2       0       0
   607 ;;      Locals:         0       0       0       0
   608 ;;      Temps:          0       0       0       0
   609 ;;      Totals:         0       2       0       0
   610 ;;Total ram usage:        2 bytes
   611 ;; Hardware stack levels used: 1
   612 ;; Hardware stack levels required when called: 1
   613 ;; This function calls:
   614 ;;		___aldiv
   615 ;; This function is called by:
   616 ;;		_setup
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           
   621                           ;psect for function _uart_init
   622  0733                     _uart_init:
   623  0733                     l794:	
   624                           ;incstack = 0
   625                           ; Regs used in _uart_init: [wreg+status,2+status,0+pclath+cstack]
   626                           
   627                           
   628                           ;uart.c: 5:     TRISBbits.TRISB1 = 0x01;
   629  0733  1683               	bsf	3,5	;RP0=1, select bank1
   630  0734  1303               	bcf	3,6	;RP1=0, select bank1
   631  0735  1486               	bsf	6,1	;volatile
   632                           
   633                           ;uart.c: 6:     TRISBbits.TRISB2 = 0x01;
   634  0736  1506               	bsf	6,2	;volatile
   635                           
   636                           ;uart.c: 7:     TXSTAbits.BRGH = 1;
   637  0737  1518               	bsf	24,2	;volatile
   638  0738                     l796:
   639                           
   640                           ;uart.c: 8:     SPBRG = ((4000000 / 16) / baudrate) - 1;
   641  0738  1283               	bcf	3,5	;RP0=0, select bank0
   642  0739  1303               	bcf	3,6	;RP1=0, select bank0
   643  073A  0826               	movf	uart_init@baudrate,w
   644  073B  00F0               	movwf	___aldiv@divisor
   645  073C  0827               	movf	uart_init@baudrate+1,w
   646  073D  00F1               	movwf	___aldiv@divisor+1
   647  073E  01F2               	clrf	___aldiv@divisor+2
   648  073F  01F3               	clrf	___aldiv@divisor+3
   649  0740  3000               	movlw	0
   650  0741  00F7               	movwf	___aldiv@dividend+3
   651  0742  3003               	movlw	3
   652  0743  00F6               	movwf	___aldiv@dividend+2
   653  0744  30D0               	movlw	208
   654  0745  00F5               	movwf	___aldiv@dividend+1
   655  0746  3090               	movlw	144
   656  0747  00F4               	movwf	___aldiv@dividend
   657  0748  2761               	fcall	___aldiv
   658  0749  0870               	movf	?___aldiv,w
   659  074A  3EFF               	addlw	255
   660  074B  1683               	bsf	3,5	;RP0=1, select bank1
   661  074C  1303               	bcf	3,6	;RP1=0, select bank1
   662  074D  0099               	movwf	25	;volatile
   663  074E                     l798:
   664                           
   665                           ;uart.c: 11:     TXSTAbits.TXEN = 1;
   666  074E  1698               	bsf	24,5	;volatile
   667  074F                     l800:
   668                           
   669                           ;uart.c: 12:     RCSTAbits.SPEN = 1;
   670  074F  1283               	bcf	3,5	;RP0=0, select bank0
   671  0750  1303               	bcf	3,6	;RP1=0, select bank0
   672  0751  1798               	bsf	24,7	;volatile
   673  0752                     l802:
   674                           
   675                           ;uart.c: 15:     TXSTAbits.TX9 = 0;
   676  0752  1683               	bsf	3,5	;RP0=1, select bank1
   677  0753  1303               	bcf	3,6	;RP1=0, select bank1
   678  0754  1318               	bcf	24,6	;volatile
   679  0755                     l804:
   680                           
   681                           ;uart.c: 16:     RCSTAbits.RX9 = 0;
   682  0755  1283               	bcf	3,5	;RP0=0, select bank0
   683  0756  1303               	bcf	3,6	;RP1=0, select bank0
   684  0757  1318               	bcf	24,6	;volatile
   685  0758                     l806:
   686                           
   687                           ;uart.c: 17:     TXSTAbits.SYNC = 0;
   688  0758  1683               	bsf	3,5	;RP0=1, select bank1
   689  0759  1303               	bcf	3,6	;RP1=0, select bank1
   690  075A  1218               	bcf	24,4	;volatile
   691  075B                     l808:
   692                           
   693                           ;uart.c: 18:     RCSTAbits.CREN = 1;
   694  075B  1283               	bcf	3,5	;RP0=0, select bank0
   695  075C  1303               	bcf	3,6	;RP1=0, select bank0
   696  075D  1618               	bsf	24,4	;volatile
   697  075E                     l810:
   698                           
   699                           ;uart.c: 20:     INTCONbits.GIE = 1;
   700  075E  178B               	bsf	11,7	;volatile
   701  075F                     l812:
   702                           
   703                           ;uart.c: 21:     INTCONbits.PEIE = 1;
   704  075F  170B               	bsf	11,6	;volatile
   705  0760                     l44:
   706  0760  0008               	return
   707  0761                     __end_of_uart_init:
   708                           
   709                           	psect	text5
   710  0761                     __ptext5:	
   711 ;; *************** function ___aldiv *****************
   712 ;; Defined at:
   713 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;  divisor         4    0[COMMON] long 
   716 ;;  dividend        4    4[COMMON] long 
   717 ;; Auto vars:     Size  Location     Type
   718 ;;  quotient        4    2[BANK0 ] long 
   719 ;;  sign            1    1[BANK0 ] unsigned char 
   720 ;;  counter         1    0[BANK0 ] unsigned char 
   721 ;; Return value:  Size  Location     Type
   722 ;;                  4    0[COMMON] long 
   723 ;; Registers used:
   724 ;;		wreg, status,2, status,0
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   730 ;;      Params:         8       0       0       0
   731 ;;      Locals:         0       6       0       0
   732 ;;      Temps:          1       0       0       0
   733 ;;      Totals:         9       6       0       0
   734 ;;Total ram usage:       15 bytes
   735 ;; Hardware stack levels used: 1
   736 ;; This function calls:
   737 ;;		Nothing
   738 ;; This function is called by:
   739 ;;		_uart_init
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           
   744                           ;psect for function ___aldiv
   745  0761                     ___aldiv:
   746  0761                     l754:	
   747                           ;incstack = 0
   748                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   749                           
   750  0761  1283               	bcf	3,5	;RP0=0, select bank0
   751  0762  1303               	bcf	3,6	;RP1=0, select bank0
   752  0763  01A1               	clrf	___aldiv@sign
   753  0764                     l756:
   754  0764  1FF3               	btfss	___aldiv@divisor+3,7
   755  0765  2F67               	goto	u171
   756  0766  2F68               	goto	u170
   757  0767                     u171:
   758  0767  2F75               	goto	l217
   759  0768                     u170:
   760  0768                     l758:
   761  0768  09F0               	comf	___aldiv@divisor,f
   762  0769  09F1               	comf	___aldiv@divisor+1,f
   763  076A  09F2               	comf	___aldiv@divisor+2,f
   764  076B  09F3               	comf	___aldiv@divisor+3,f
   765  076C  0AF0               	incf	___aldiv@divisor,f
   766  076D  1903               	skipnz
   767  076E  0AF1               	incf	___aldiv@divisor+1,f
   768  076F  1903               	skipnz
   769  0770  0AF2               	incf	___aldiv@divisor+2,f
   770  0771  1903               	skipnz
   771  0772  0AF3               	incf	___aldiv@divisor+3,f
   772  0773  01A1               	clrf	___aldiv@sign
   773  0774  0AA1               	incf	___aldiv@sign,f
   774  0775                     l217:
   775  0775  1FF7               	btfss	___aldiv@dividend+3,7
   776  0776  2F78               	goto	u181
   777  0777  2F79               	goto	u180
   778  0778                     u181:
   779  0778  2F88               	goto	l764
   780  0779                     u180:
   781  0779                     l760:
   782  0779  09F4               	comf	___aldiv@dividend,f
   783  077A  09F5               	comf	___aldiv@dividend+1,f
   784  077B  09F6               	comf	___aldiv@dividend+2,f
   785  077C  09F7               	comf	___aldiv@dividend+3,f
   786  077D  0AF4               	incf	___aldiv@dividend,f
   787  077E  1903               	skipnz
   788  077F  0AF5               	incf	___aldiv@dividend+1,f
   789  0780  1903               	skipnz
   790  0781  0AF6               	incf	___aldiv@dividend+2,f
   791  0782  1903               	skipnz
   792  0783  0AF7               	incf	___aldiv@dividend+3,f
   793  0784                     l762:
   794  0784  3001               	movlw	1
   795  0785  00F8               	movwf	??___aldiv
   796  0786  0878               	movf	??___aldiv,w
   797  0787  06A1               	xorwf	___aldiv@sign,f
   798  0788                     l764:
   799  0788  3000               	movlw	0
   800  0789  00A5               	movwf	___aldiv@quotient+3
   801  078A  3000               	movlw	0
   802  078B  00A4               	movwf	___aldiv@quotient+2
   803  078C  3000               	movlw	0
   804  078D  00A3               	movwf	___aldiv@quotient+1
   805  078E  3000               	movlw	0
   806  078F  00A2               	movwf	___aldiv@quotient
   807  0790                     l766:
   808  0790  0873               	movf	___aldiv@divisor+3,w
   809  0791  0472               	iorwf	___aldiv@divisor+2,w
   810  0792  0471               	iorwf	___aldiv@divisor+1,w
   811  0793  0470               	iorwf	___aldiv@divisor,w
   812  0794  1903               	skipnz
   813  0795  2F97               	goto	u191
   814  0796  2F98               	goto	u190
   815  0797                     u191:
   816  0797  2FE5               	goto	l786
   817  0798                     u190:
   818  0798                     l768:
   819  0798  01A0               	clrf	___aldiv@counter
   820  0799  0AA0               	incf	___aldiv@counter,f
   821  079A  2FA8               	goto	l772
   822  079B                     l770:
   823  079B  3001               	movlw	1
   824  079C  00F8               	movwf	??___aldiv
   825  079D                     u205:
   826  079D  1003               	clrc
   827  079E  0DF0               	rlf	___aldiv@divisor,f
   828  079F  0DF1               	rlf	___aldiv@divisor+1,f
   829  07A0  0DF2               	rlf	___aldiv@divisor+2,f
   830  07A1  0DF3               	rlf	___aldiv@divisor+3,f
   831  07A2  0BF8               	decfsz	??___aldiv,f
   832  07A3  2F9D               	goto	u205
   833  07A4  3001               	movlw	1
   834  07A5  00F8               	movwf	??___aldiv
   835  07A6  0878               	movf	??___aldiv,w
   836  07A7  07A0               	addwf	___aldiv@counter,f
   837  07A8                     l772:
   838  07A8  1FF3               	btfss	___aldiv@divisor+3,7
   839  07A9  2FAB               	goto	u211
   840  07AA  2FAC               	goto	u210
   841  07AB                     u211:
   842  07AB  2F9B               	goto	l770
   843  07AC                     u210:
   844  07AC                     l774:
   845  07AC  3001               	movlw	1
   846  07AD  00F8               	movwf	??___aldiv
   847  07AE                     u225:
   848  07AE  1003               	clrc
   849  07AF  0DA2               	rlf	___aldiv@quotient,f
   850  07B0  0DA3               	rlf	___aldiv@quotient+1,f
   851  07B1  0DA4               	rlf	___aldiv@quotient+2,f
   852  07B2  0DA5               	rlf	___aldiv@quotient+3,f
   853  07B3  0BF8               	decfsz	??___aldiv,f
   854  07B4  2FAE               	goto	u225
   855  07B5                     l776:
   856  07B5  0873               	movf	___aldiv@divisor+3,w
   857  07B6  0277               	subwf	___aldiv@dividend+3,w
   858  07B7  1D03               	skipz
   859  07B8  2FC3               	goto	u235
   860  07B9  0872               	movf	___aldiv@divisor+2,w
   861  07BA  0276               	subwf	___aldiv@dividend+2,w
   862  07BB  1D03               	skipz
   863  07BC  2FC3               	goto	u235
   864  07BD  0871               	movf	___aldiv@divisor+1,w
   865  07BE  0275               	subwf	___aldiv@dividend+1,w
   866  07BF  1D03               	skipz
   867  07C0  2FC3               	goto	u235
   868  07C1  0870               	movf	___aldiv@divisor,w
   869  07C2  0274               	subwf	___aldiv@dividend,w
   870  07C3                     u235:
   871  07C3  1C03               	skipc
   872  07C4  2FC6               	goto	u231
   873  07C5  2FC7               	goto	u230
   874  07C6                     u231:
   875  07C6  2FD6               	goto	l782
   876  07C7                     u230:
   877  07C7                     l778:
   878  07C7  0870               	movf	___aldiv@divisor,w
   879  07C8  02F4               	subwf	___aldiv@dividend,f
   880  07C9  0871               	movf	___aldiv@divisor+1,w
   881  07CA  1C03               	skipc
   882  07CB  0F71               	incfsz	___aldiv@divisor+1,w
   883  07CC  02F5               	subwf	___aldiv@dividend+1,f
   884  07CD  0872               	movf	___aldiv@divisor+2,w
   885  07CE  1C03               	skipc
   886  07CF  0F72               	incfsz	___aldiv@divisor+2,w
   887  07D0  02F6               	subwf	___aldiv@dividend+2,f
   888  07D1  0873               	movf	___aldiv@divisor+3,w
   889  07D2  1C03               	skipc
   890  07D3  0F73               	incfsz	___aldiv@divisor+3,w
   891  07D4  02F7               	subwf	___aldiv@dividend+3,f
   892  07D5                     l780:
   893  07D5  1422               	bsf	___aldiv@quotient,0
   894  07D6                     l782:
   895  07D6  3001               	movlw	1
   896  07D7                     u245:
   897  07D7  1003               	clrc
   898  07D8  0CF3               	rrf	___aldiv@divisor+3,f
   899  07D9  0CF2               	rrf	___aldiv@divisor+2,f
   900  07DA  0CF1               	rrf	___aldiv@divisor+1,f
   901  07DB  0CF0               	rrf	___aldiv@divisor,f
   902  07DC  3EFF               	addlw	-1
   903  07DD  1D03               	skipz
   904  07DE  2FD7               	goto	u245
   905  07DF                     l784:
   906  07DF  3001               	movlw	1
   907  07E0  02A0               	subwf	___aldiv@counter,f
   908  07E1  1D03               	btfss	3,2
   909  07E2  2FE4               	goto	u251
   910  07E3  2FE5               	goto	u250
   911  07E4                     u251:
   912  07E4  2FAC               	goto	l774
   913  07E5                     u250:
   914  07E5                     l786:
   915  07E5  0821               	movf	___aldiv@sign,w
   916  07E6  1903               	btfsc	3,2
   917  07E7  2FE9               	goto	u261
   918  07E8  2FEA               	goto	u260
   919  07E9                     u261:
   920  07E9  2FF5               	goto	l790
   921  07EA                     u260:
   922  07EA                     l788:
   923  07EA  09A2               	comf	___aldiv@quotient,f
   924  07EB  09A3               	comf	___aldiv@quotient+1,f
   925  07EC  09A4               	comf	___aldiv@quotient+2,f
   926  07ED  09A5               	comf	___aldiv@quotient+3,f
   927  07EE  0AA2               	incf	___aldiv@quotient,f
   928  07EF  1903               	skipnz
   929  07F0  0AA3               	incf	___aldiv@quotient+1,f
   930  07F1  1903               	skipnz
   931  07F2  0AA4               	incf	___aldiv@quotient+2,f
   932  07F3  1903               	skipnz
   933  07F4  0AA5               	incf	___aldiv@quotient+3,f
   934  07F5                     l790:
   935  07F5  0825               	movf	___aldiv@quotient+3,w
   936  07F6  00F3               	movwf	?___aldiv+3
   937  07F7  0824               	movf	___aldiv@quotient+2,w
   938  07F8  00F2               	movwf	?___aldiv+2
   939  07F9  0823               	movf	___aldiv@quotient+1,w
   940  07FA  00F1               	movwf	?___aldiv+1
   941  07FB  0822               	movf	___aldiv@quotient,w
   942  07FC  00F0               	movwf	?___aldiv
   943  07FD                     l227:
   944  07FD  0008               	return
   945  07FE                     __end_of___aldiv:
   946  007E                     btemp	set	126	;btemp
   947  007E                     wtemp0	set	126
   948                           
   949                           	psect	idloc
   950                           
   951                           ;Config register IDLOC0 @ 0x2000
   952                           ;	unspecified, using default values
   953  2000                     	org	8192
   954  2000  3FFF               	dw	16383
   955                           
   956                           ;Config register IDLOC1 @ 0x2001
   957                           ;	unspecified, using default values
   958  2001                     	org	8193
   959  2001  3FFF               	dw	16383
   960                           
   961                           ;Config register IDLOC2 @ 0x2002
   962                           ;	unspecified, using default values
   963  2002                     	org	8194
   964  2002  3FFF               	dw	16383
   965                           
   966                           ;Config register IDLOC3 @ 0x2003
   967                           ;	unspecified, using default values
   968  2003                     	org	8195
   969  2003  3FFF               	dw	16383
   970                           
   971                           	psect	config
   972                           
   973                           ;Config register CONFIG @ 0x2007
   974                           ;	Oscillator Selection bits
   975                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
   976                           ;	Watchdog Timer Enable bit
   977                           ;	WDTE = OFF, WDT disabled
   978                           ;	Power-up Timer Enable bit
   979                           ;	PWRTE = OFF, PWRT disabled
   980                           ;	RA5/MCLR/VPP Pin Function Select bit
   981                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
   982                           ;	Brown-out Detect Enable bit
   983                           ;	BOREN = ON, BOD enabled
   984                           ;	Low-Voltage Programming Enable bit
   985                           ;	LVP = ON, RB4/PGM pin has PGM function, low-voltage programming enabled
   986                           ;	Data EE Memory Code Protection bit
   987                           ;	CPD = OFF, Data memory code protection off
   988                           ;	Flash Program Memory Code Protection bit
   989                           ;	CP = OFF, Code protection off
   990  2007                     	org	8199
   991  2007  3FF8               	dw	16376

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      8       8
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    uart_send_string@str	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _uart_send_string->_uart_send
    _uart_init->___aldiv

Critical Paths under _main in BANK0

    _setup->_uart_init
    _uart_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     643
                                              9 COMMON     3     3      0
                              _setup
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     2     2      0      93
                                              1 COMMON     2     2      0
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     550
                          _uart_init
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            2     0      2     550
                                              6 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _uart_init
       ___aldiv
   _uart_send_string
     _uart_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      8       8       3       10.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Mar 22 19:57:17 2022

                        pc 0002   __end_of_uart_send_string 0733                         l17 0702  
                       l50 06F0                         l44 0760                         l53 071B  
                       l47 06E8                         l59 0732                         fsr 0004  
                      l217 0775                        l227 07FD                        l800 074F  
                      l720 06EE                        l810 075E                        l802 0752  
                      l812 075F                        l804 0755                        l820 06FF  
                      l806 0758                        l814 06F1                        l718 06E8  
                      l822 071B                        l830 0703                        l760 0779  
                      l808 075B                        l816 06F4                        l824 0722  
                      l832 0704                        l770 079B                        l762 0784  
                      l754 0761                        l818 06FB                        l826 0726  
                      l834 070A                        l780 07D5                        l772 07A8  
                      l764 0788                        l756 0764                        l828 072A  
                      l836 070C                        l790 07F5                        l782 07D6  
                      l774 07AC                        l766 0790                        l758 0768  
                      l784 07DF                        l776 07B5                        l768 0798  
                      l778 07C7                        l786 07E5                        l794 0733  
                      l788 07EA                        l796 0738                        l798 074E  
                      u110 06EE                        u111 06ED                        u210 07AC  
                      u211 07AB                        u205 079D                        u230 07C7  
                      u231 07C6                        u225 07AE                        u250 07E5  
                      u170 0768                        u251 07E4                        u235 07C3  
                      u171 0767                        u307 0712                        u260 07EA  
                      u180 0779                        u261 07E9                        u245 07D7  
                      u181 0778                        u190 0798                        u270 0721  
                      u191 0797                        u271 0720                        u280 0732  
                      u281 0731                        u290 070A                        u291 0709  
                      fsr0 0004                       STR_1 0007                       _main 0703  
                     btemp 007E                       start 0000            __end_of___aldiv 07FE  
                    ?_main 0070                      _RCREG 001A                      _SPBRG 0099  
                    _TXREG 0019                      _setup 06F1                      pclath 000A  
                    status 0003                      wtemp0 007E            __initialization 07FE  
             __end_of_main 071A                     ??_main 0079                     ?_setup 0070  
                ??___aldiv 0078    __end_of__initialization 07FE             __pcstackCOMMON 0070  
            __end_of_setup 0703          ?_uart_send_string 0070         ??_uart_send_string 0071  
                  ??_setup 0079                 __pmaintext 0703         __size_of_uart_init 002E  
       __size_of_uart_send 000A                 __stringtab 0001                    ___aldiv 0761  
                _CMCONbits 001F                    __ptext1 071A                    __ptext2 06E7  
                  __ptext3 06F1                    __ptext4 0733                    __ptext5 0761  
         ___aldiv@dividend 0074       end_of_initialization 07FE          __end_of_uart_init 0761  
        __end_of_uart_send 06F1                  _RCSTAbits 0018           ___aldiv@quotient 0022  
                _PORTAbits 0005                  _TRISAbits 0085                  _TRISBbits 0086  
                _TXSTAbits 0098        start_initialization 07FE  __size_of_uart_send_string 0019  
                ___latbits 0000              __pcstackBANK0 0020                   ?___aldiv 0070  
                __pstrings 0001        uart_send_string@str 0072             __size_of_setup 0012  
          ___aldiv@divisor 0070            ___aldiv@counter 0020                   _PCONbits 008E  
                 _PIR1bits 000C                  _uart_init 0733                  _uart_send 06E7  
              __stringbase 0006           _uart_send_string 071A                 ?_uart_init 0026  
               ?_uart_send 0070           __size_of___aldiv 009D         __end_of__stringtab 0007  
            __size_of_main 0017                 _INTCONbits 000B          uart_init@baudrate 0026  
                stringcode 0001                ??_uart_init 0079                ??_uart_send 0070  
            uart_send@byte 0070                   stringdir 0001                   stringtab 0001  
             ___aldiv@sign 0021  
